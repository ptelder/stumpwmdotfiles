;; -*-lisp-*-
;;
;; Stub Stumpwm init.lisp

;; This stub shunts initialization over to stump_conf.lisp, which
;; is generated by tangling the configuration out of stump_conf.org.

;; Since I don't really want to think about keeping the .org file
;; in sync with the .lisp file, it also checks to see if the .org
;; file has been updated and re-tangles. It also handles a missing
;; stump_conf.lisp by doing the tangle, which should come in handy
;; when cloning a fresh .stumwm.d.

;; ================================================================
;; Note: This is likely not idomatic Common Lisp code. This is more
;; like "I got Clojure to talk to a web service that one time?"
;; Lisp code
;; ================================================================


(defvar *tangled-path*
  ;; This is a string leading to the stum_conf.lisp file
  ;; When initializing, StumpWM seems to use ~ as the working directory...
  (concatenate 'string
	       (namestring (probe-file "."))
	       ".stumpwm.d/"
	       "stump_conf.lisp"))

(defvar *orgfile-path*
  ;; This is a string leading to the stum_conf.lisp file
  ;; When initializing, StumpWM seems to use ~ as the working directory...
  (concatenate 'string
	       (namestring (probe-file "."))
	       ".stumpwm.d/"
	       "stump_conf.org"))

(defvar *tangler-path*
  ;; This is a string leading to the Emacs shell script that does the tangle
  (concatenate 'string
	       (namestring (probe-file "."))
	       ".stumpwm.d/"
	       "tangle.elisp"))

(if
 ;; Is the stump_conf.lisp file there to be loaded?
 (probe-file *tangled-path*)
 ;; Yes? Is it newer than the org file?
 (if (>
      (file-write-date *tangled-path*)
      (file-write-date *orgfile-path*))
     ;; Lisp file is newer, load it.
     (load *tangled-path*)
     ;; Lisp file is out of date, re-tangle it.
     (progn
       (sb-ext:run-program *tangler-path* ())
       ;; And now load the re-tangled file
       (load *tangled-path*)))
 ;; No stump_conf.lisp? Tangle a new one out and load it.
 (progn
   (sb-ext:run-program *tangler-path* ())
   (load *tangled-path*)))
